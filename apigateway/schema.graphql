
interface Course { 
    "ID in whu-jwgl"
    id: String!
    name: String!
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
}

#graphql
"Generic person type"
type Person { 
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
    "stu/faculty ID"
    id: String!
}
type Subject { 
    name: String! @unique
    category: String!
    "学制"
    schoolingYear: Int!
}

"修习某专业"
type MajorInRecord { 
    start: Date!
    subject: Subject! @relationship(type:"MajorIn", direction:OUT)
    major: Boolean!
}
type AbortRecord { 
    date: Date!
    subject: Subject! @relationship(type:"Abort", direction:OUT)
}
type RepetitionRecord { 
    date: Date!
}
type Student { 
    "student id"
    id: String! @unique
    "classes the student has taken"
    classes: [Class!]! @relationship(type:"Takes", direction:OUT)
    "学业变更记录"
    studyRecords: [StudyRecord!]!
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
}
type Faculty { 
    "faculty id"
    id: String! @unique
    "职务"
    duties: [Duty!]! @relationship(type:"OnBusiness", direction:OUT)
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
}
type Teacher { 
    "职称"
    title: ProfessionalTitle
    "classes the teacher teaches"
    classes: [Class!]! @relationship(type:"Teaches", direction:OUT)
    "faculty id"
    id: String! @unique
    "职务"
    duties: [Duty!]! @relationship(type:"OnBusiness", direction:OUT)
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
}
type Duty { 
    name: String!
    depart: Department! @relationship(type:"DutyAt", direction:OUT)
}
type Department { 
    name: String!
    parent: Department @relationship(type:"SubDepartment", direction:IN)
    subDeparts: Department @relationship(type:"SubDepartment", direction:OUT)
}

"Repetition unit of each class"
type Period { 
    "On which day"
    weekday: Int!
    "Start block(节)"
    start: Int!
    "End block"
    end: Int!
    "Start semester week"
    weekstart: Int!
    "End semester week"
    weekend: Int!
    weekInterval: Int!
}
type College { 
    name: String! @unique
    courses: [Course!]! @relationship(type:"offeredBy",direction:IN)
}

"专业课"
type DepartmentCourse implements Course { 
    id: String! @unique
    name: String!
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
}

"公共课"
type GeneralCourse implements Course { 
    id: String! @unique
    name: String!
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
}

"通识课"
type LiberalCourse implements Course { 
    id: String! @unique
    type: HASSType
    name: String!
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
}

"体育课"
type PECourse implements Course { 
    id: String! @unique
    name: String!
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
}
type Query { 
    courses: [CourseKinds!]
}
type Class { 
    "ID in whu-jwgl"
    id: String! @unique
    course: Course! @relationship(type:"ClassOf", direction:OUT)
    teacher: [Teacher!]! @relationship(type:"Teaches", direction:IN)
    position: POI
    schedule: [Period!]! @relationship(type:"ClassPeriod",direction:OUT)
}

# place of information
type POI { 
    id: ID! @id @unique
    name: String!
    # GPS pos
    loc: Point
    subPOIs: [POI!]! @relationship(type:"locatedIn",direction:IN)
    parentPOI: POI @relationship(type:"locatedIn",direction:OUT)
}
enum ProfessionalTitle { 
    "Full Professor"
    Prof
    "Associate Professor"
    AssocProf
    "Assistant Professor"
    AssisProf
    Lecturer
}

"通识课程类型"
enum HASSType { 
    Humanity
    Art
    Science
    SocialScience
}
union StudyRecord = MajorInRecord | AbortRecord | RepetitionRecord  
union CourseKinds = DepartmentCourse | GeneralCourse | LiberalCourse | PECourse  