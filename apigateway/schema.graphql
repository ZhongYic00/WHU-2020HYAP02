

#graphql
"Generic independent entity type"
interface Entity { 
    "system internal id"
    _id: ID @id
}

"Generic person type"
interface PersonBase implements Entity { 
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
    "stu/faculty ID"
    id: String!
    "system internal id"
    _id: ID @id
}
interface FacultyBase { 
    "职务"
    duties: [Duty!]! @relationship(type:"OnBusiness", direction:OUT)
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
    "stu/faculty ID"
    id: String!
    "system internal id"
    _id: ID @id
}
interface Course implements Entity { 
    "ID in whu-jwgl"
    id: String!
    name: String!
    "开课学院"
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
    "system internal id"
    _id: ID @id
}
type Post { 
    poster: Identity
    createdAt: DateTime!
    content: Entity!
    cites: [citeRelation!]!
    likes: Int!
    dislikes: Int!
}
type Identity implements Entity { 
    nickname: String!
    realperson: PersonBase! @relationship(type:"Owner", direction:OUT)
    "system internal id"
    _id: ID @id
}
type citeRelation { 
    post: Post!
    attitude: Boolean
}
type Subject { 
    name: String! @unique
    category: String!
    "学制"
    schoolingYear: Int!
}

"修习某专业"
type MajorInRecord { 
    date: Date!
    subject: Subject! @relationship(type:"MajorIn", direction:OUT)
    major: Boolean!
    "是否为中止"
    isAbort: Boolean!
}
type RepetitionRecord { 
    date: Date!
}
type Student implements PersonBase& Entity { 
    "student id"
    id: String! @unique
    "classes the student has taken"
    classes: [Class!]! @relationship(type:"Takes", direction:OUT)
    "学业变更记录"
    studyRecords: [StudyRecord!]! @relationship(type:"HasRecord", direction:OUT)
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
    "system internal id"
    _id: ID @id
}
type Faculty implements FacultyBase& PersonBase& Entity { 
    "faculty id"
    id: String! @unique
    "职务"
    duties: [Duty!]! @relationship(type:"OnBusiness", direction:OUT)
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
    "system internal id"
    _id: ID @id
}

"研究团队"
type ResearchTeam implements Entity { 
    name: String!
    members: [PersonBase!]! @relationship(type:"MemberOf", direction:IN)
    "system internal id"
    _id: ID @id
}
type Teacher implements FacultyBase& PersonBase& Entity { 
    "职称"
    title: ProfessionalTitle
    "classes the teacher teaches"
    classes: [Class!]! @relationship(type:"Teaches", direction:OUT)
    "research interests"
    interests: [String!]!
    "research teams"
    teams: [ResearchTeam!]! @relationship(type:"MemberOf", direction:OUT)
    "faculty id"
    id: String! @unique
    "职务"
    duties: [Duty!]! @relationship(type:"OnBusiness", direction:OUT)
    name: String!
    birth: Date
    age: Int @customResolver(requires: "birth")
    "biogender, 0 for male, 1 for female"
    gender: Boolean
    "system internal id"
    _id: ID @id
}
type Duty { 
    name: String!
    depart: Department! @relationship(type:"DutyAt", direction:OUT)
}
type Department implements Entity { 
    name: String!
    parent: Department @relationship(type:"SubDepartment", direction:IN)
    subDeparts: Department @relationship(type:"SubDepartment", direction:OUT)
    "system internal id"
    _id: ID @id
}

"Repetition unit of each class"
type Period { 
    "On which day"
    weekday: Int!
    "Start block(节)"
    start: Int!
    "End block"
    end: Int!
    "Start semester week"
    weekstart: Int!
    "End semester week"
    weekend: Int!
    weekInterval: Int!
}
type College implements Entity { 
    name: String! @unique
    courses: [Course!]! @relationship(type:"offeredBy",direction:IN)
    "system internal id"
    _id: ID @id
}

"专业课"
type DepartmentCourse implements Course& Entity { 
    id: String! @unique
    name: String!
    "开课学院"
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
    "system internal id"
    _id: ID @id
}

"公共课"
type GeneralCourse implements Course& Entity { 
    id: String! @unique
    name: String!
    "开课学院"
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
    "system internal id"
    _id: ID @id
}

"通识课"
type LiberalCourse implements Course& Entity { 
    id: String! @unique
    type: HASSType
    name: String!
    "开课学院"
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
    "system internal id"
    _id: ID @id
}

"体育课"
type PECourse implements Course& Entity { 
    id: String! @unique
    name: String!
    "开课学院"
    college: [College!]! @relationship(type:"offeredBy",direction:OUT)
    prerequisite: [Course!]! @relationship(type:"Requires",direction:OUT)
    advanceCourses: [Course!]! @relationship(type:"Requires",direction:IN)
    classes: [Class!]! @relationship(type:"ClassOf",direction:IN)
    "system internal id"
    _id: ID @id
}
type Query { 
    courses: [Course!]
    people: [PersonBase!] @cypher(
    statement: """
    MATCH(a: Teacher)
    RETURN a
    UNION
    MATCH(a: Student)
    RETURN a"""
    columnName: "a"
    )
}
type Class implements Entity { 
    "ID in whu-jwgl"
    id: String! @unique
    course: Course! @relationship(type:"ClassOf", direction:OUT)
    teacher: [Teacher!]! @relationship(type:"Teaches", direction:IN)
    position: POI
    schedule: [Period!]! @relationship(type:"ClassPeriod",direction:OUT)
    "system internal id"
    _id: ID @id
}

# place of information
type POI implements Entity { 
    name: String!
    # GPS pos
    loc: Point
    subPOIs: [POI!]! @relationship(type:"locatedIn",direction:IN)
    parentPOI: POI @relationship(type:"locatedIn",direction:OUT)
    "system internal id"
    _id: ID @id
}
enum ProfessionalTitle { 
    "Full Professor"
    Prof
    "Associate Professor"
    AssocProf
    "Assistant Professor"
    AssisProf
    Lecturer
}

"通识课程类型"
enum HASSType { 
    Humanity
    Art
    Science
    SocialScience
}
union StudyRecord = MajorInRecord | RepetitionRecord  
union CourseKinds = DepartmentCourse | GeneralCourse | LiberalCourse | PECourse  